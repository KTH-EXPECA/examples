{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "influxdb",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "barchart",
      "name": "Bar chart",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.0.1"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    },
    {
      "type": "panel",
      "id": "trend",
      "name": "Trend",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "log": 10,
              "type": "log"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 5,
          "mappings": [],
          "min": 0.00001,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        },
        "xField": "Delay",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"edaf_main\")\n    |> range(start: -72h)\n    |> filter(fn: (r) => r._measurement == \"packet_decomposed\" and r._field == \"app.e2e_delay\" and r._value <= 400.0)\n    |> histogram(bins: linearBins(start: 0.0, width: 0.5, count: 800, infinity: false), normalize: true)",
          "refId": "A"
        }
      ],
      "title": "End-to-end Delay CCDF",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^_value.*",
            "renamePattern": "CDF"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^le.*",
            "renamePattern": "Delay"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "CDF"
                }
              },
              "operator": "*",
              "right": {
                "fixed": "-1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "CCDF",
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "CDF * -1"
                }
              },
              "right": {
                "fixed": "1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "Delay",
                "CCDF"
              ]
            }
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 4,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 10,
              "type": "log"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 5,
          "mappings": [],
          "min": 0.00001,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Delay"
            },
            "properties": [
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "Empirical CCDF [-2h]",
                  "GMM Pred [-2h]",
                  "EVM Pred [-2h]"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 8,
        "y": 0
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "Delay"
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: \"edaf_main\")\n    |> range(start: -2h)\n    |> filter(fn: (r) => r._measurement == \"packet_decomposed\" and r._field == \"app.e2e_delay\" and r._value <= 400)\n    |> histogram(bins: linearBins(start: 0.0, width: 0.5, count: 800, infinity: false), normalize: true)",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\ngmmcommon = (tables=<-) =>\n  tables\n    |> range(start: -10m)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_gmm_2h_probs\" and\n         (r._field == \"y\" or r._field == \"ccdf\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"ccdf\"])\n\n// ---------- find newest timestamp ----------\ngmmlatestTime =\n  from(bucket: \"pr3d\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"predictions_gmm_2h_probs\")\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> gmmcommon()\n  |> group()\n  |> filter(fn: (r) => r._time == gmmlatestTime._time)   // all rows from latest batch\n  |> sort(columns: [\"y\"])                             // final sort by y (ascending)\n  |> map(fn: (r) => ({\n      r with\n      y_gmm_2h: r.y,\n      ccdf_gmm_2h: r.ccdf\n  }))\n  |> drop(columns: [\"y\", \"ccdf\"])\n  |> sort(columns: [\"y_gmm_2h\"])",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\ngmevmcommon = (tables=<-) =>\n  tables\n    |> range(start: -10m)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_gmevm_2h_probs\" and\n         (r._field == \"y\" or r._field == \"ccdf\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"ccdf\"])\n\n// ---------- find newest timestamp ----------\ngmevmlatestTime =\n  from(bucket: \"pr3d\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"predictions_gmevm_2h_probs\")\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> gmevmcommon()\n  |> group()\n  |> filter(fn: (r) => r._time == gmevmlatestTime._time)   // all rows from latest batch\n  |> map(fn: (r) => ({\n      r with\n      y_gmevm_2h: r.y,\n      ccdf_gmevm_2h: r.ccdf\n  }))\n  |> drop(columns: [\"y\", \"ccdf\"])\n  |> sort(columns: [\"y_gmevm_2h\"])",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\napxcommon = (tables=<-) =>\n  tables\n    |> range(start: -10m)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_apx_2h_probs\" and\n         (r._field == \"y\" or r._field == \"ccdf\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"ccdf\"])\n\n// ---------- find newest timestamp ----------\napxlatestTime =\n  from(bucket: \"pr3d\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"predictions_apx_2h_probs\")\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> apxcommon()\n  |> group()\n  |> filter(fn: (r) => r._time == apxlatestTime._time)   // all rows from latest batch\n  |> map(fn: (r) => ({\n      r with\n      y_apx_2h: r.y,\n      ccdf_apx_2h: r.ccdf\n  }))\n  |> drop(columns: [\"y\", \"ccdf\"])\n  |> sort(columns: [\"y_apx_2h\"])",
          "refId": "D"
        }
      ],
      "title": "End-to-end Delay CCDF",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^_value.*",
            "renamePattern": "CDF"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^le.*",
            "renamePattern": "Delay"
          }
        },
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "greaterOrEqual",
                  "options": {
                    "value": "400"
                  }
                },
                "fieldName": "Delay"
              }
            ],
            "match": "any",
            "type": "exclude"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "CDF"
                }
              },
              "operator": "*",
              "right": {
                "fixed": "-1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "CCDF",
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "packet_decomposed CDF * -1"
                }
              },
              "right": {
                "fixed": "1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "concatenate",
          "options": {
            "frameNameLabel": "frame",
            "frameNameMode": "field"
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "byVariable": false,
            "include": {
              "names": [
                "Delay",
                "packet_decomposed · CCDF",
                "ccdf_gmm_2h",
                "ccdf_apx_2h"
              ]
            }
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "\\bccdf_gmm_2h\\b",
            "renamePattern": "GMM Pred [-2h]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "packet_decomposed · CCDF",
            "renamePattern": "Empirical CCDF [-2h]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "\\bccdf_apx_2h\\b",
            "renamePattern": "EVM Pred [-2h]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "ccdf_gmevm_2h",
            "renamePattern": "EVM Pred [-2h]"
          }
        }
      ],
      "type": "trend"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 4,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 10,
              "type": "log"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 5,
          "mappings": [],
          "min": 0.00001,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Delay"
            },
            "properties": [
              {
                "id": "decimals",
                "value": 1
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 16,
        "y": 0
      },
      "id": 15,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "Delay"
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: \"edaf_main\")\n    |> range(start: -30m)\n    |> filter(fn: (r) => r._measurement == \"packet_decomposed\" and r._field == \"app.e2e_delay\" and r._value <= 400)\n    |> histogram(bins: linearBins(start: 0.0, width: 0.5, count: 800, infinity: false), normalize: true)",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\ngmmcommon = (tables=<-) =>\n  tables\n    |> range(start: -10m)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_gmm_30m_probs\" and\n         (r._field == \"y\" or r._field == \"ccdf\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"ccdf\"])\n\n// ---------- find newest timestamp ----------\ngmmlatestTime =\n  from(bucket: \"pr3d\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"predictions_gmm_30m_probs\")\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> gmmcommon()\n  |> group()\n  |> filter(fn: (r) => r._time == gmmlatestTime._time)   // all rows from latest batch\n  |> sort(columns: [\"y\"])                             // final sort by y (ascending)\n  |> map(fn: (r) => ({\n      r with\n      y_gmm_30m: r.y,\n      ccdf_gmm_30m: r.ccdf\n  }))\n  |> drop(columns: [\"y\", \"ccdf\"])\n  |> sort(columns: [\"y_gmm_30m\"])",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\napxcommon = (tables=<-) =>\n  tables\n    |> range(start: -10m)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_apx_30m_probs\" and\n         (r._field == \"y\" or r._field == \"ccdf\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"ccdf\"])\n\n// ---------- find newest timestamp ----------\napxlatestTime =\n  from(bucket: \"pr3d\")\n    |> range(start: -10m)\n    |> filter(fn: (r) => r._measurement == \"predictions_apx_30m_probs\")\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> apxcommon()\n  |> group()\n  |> filter(fn: (r) => r._time == apxlatestTime._time)   // all rows from latest batch\n  |> map(fn: (r) => ({\n      r with\n      y_apx_30m: r.y,\n      ccdf_apx_30m: r.ccdf\n  }))\n  |> drop(columns: [\"y\", \"ccdf\"])\n  |> sort(columns: [\"y_apx_30m\"])",
          "refId": "B"
        }
      ],
      "title": "End-to-end Delay CCDF",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^_value.*",
            "renamePattern": "CDF"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^le.*",
            "renamePattern": "Delay"
          }
        },
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "greaterOrEqual",
                  "options": {
                    "value": "400"
                  }
                },
                "fieldName": "Delay"
              }
            ],
            "match": "any",
            "type": "exclude"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "CDF"
                }
              },
              "operator": "*",
              "right": {
                "fixed": "-1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "CCDF",
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "packet_decomposed CDF * -1"
                }
              },
              "right": {
                "fixed": "1"
              }
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "concatenate",
          "options": {
            "frameNameLabel": "frame",
            "frameNameMode": "field"
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "byVariable": false,
            "include": {
              "names": [
                "Delay",
                "packet_decomposed · CCDF",
                "ccdf_gmm_30m",
                "ccdf_apx_30m"
              ]
            }
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "ccdf_gmm_30m",
            "renamePattern": "GMM Pred [-30m]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "packet_decomposed · CCDF",
            "renamePattern": "Histogram [-30m]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "ccdf_apx_30m",
            "renamePattern": "EVM Pred [-30m]"
          }
        }
      ],
      "type": "trend"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 0,
        "y": 8
      },
      "id": 6,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"edaf_main\")\n  |> range(start: -72h)\n  |> filter(fn: (r) =>\n       r._measurement == \"packet_decomposed\" and\n       r._field == \"app.e2e_delay\")\n  |> count(column: \"_value\")   // one count per series\n  |> group()                   // put all series in one table\n  |> sum(column: \"_value\")     // add them up → single row with the total",
          "refId": "A"
        }
      ],
      "title": "Delay Measurements [-72h]",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "_value"
              ]
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 8,
        "y": 8
      },
      "id": 10,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"edaf_main\")\n  |> range(start: -2h)\n  |> filter(fn: (r) =>\n       r._measurement == \"packet_decomposed\" and\n       r._field == \"app.e2e_delay\")\n  |> count(column: \"_value\")   // one count per series\n  |> group()                   // put all series in one table\n  |> sum(column: \"_value\")     // add them up → single row with the total",
          "refId": "A"
        }
      ],
      "title": "Delay Measurements [-2h]",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "_value"
              ]
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 16,
        "y": 8
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"edaf_main\")\n  |> range(start: -30m)\n  |> filter(fn: (r) =>\n       r._measurement == \"packet_decomposed\" and\n       r._field == \"app.e2e_delay\")\n  |> count(column: \"_value\")   // one count per series\n  |> group()                   // put all series in one table\n  |> sum(column: \"_value\")     // add them up → single row with the total",
          "refId": "A"
        }
      ],
      "title": "Delay Measurements [-30m]",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "_value"
              ]
            }
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 4,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 5,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Delay"
            },
            "properties": [
              {
                "id": "decimals",
                "value": 1
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 8,
        "x": 0,
        "y": 11
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "Delay"
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: \"edaf_main\")\n    |> range(start: -18h)\n    |> filter(fn: (r) => r._measurement == \"packet_decomposed\" and r._field == \"app.e2e_delay\" and r._value <= 119.0)\n    |> histogram(bins: linearBins(start: 0.0, width: 0.5, count: 240, infinity: false), normalize: true)\n    |> difference(nonNegative: true)",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "// ---------- reusable part ----------\ncommon = (tables=<-) =>\n  tables\n    |> range(start: -10s)\n    |> filter(fn: (r) =>\n         r._measurement == \"predictions_probs\" and\n         (r._field == \"y\" or r._field == \"prob\"))\n    |> pivot(\n         rowKey: [\"_time\", \"point_id\"],\n         columnKey: [\"_field\"],\n         valueColumn: \"_value\")\n    |> keep(columns: [\"_time\", \"y\", \"prob\"])\n\n// ---------- find newest timestamp ----------\nlatestTime =\n  from(bucket: \"pr3d\")\n    |> common()\n    |> group()\n    |> max(column: \"_time\")\n    |> findRecord(fn: (key) => true, idx: 0)\n\n// ---------- keep all rows with that timestamp ----------\nfrom(bucket: \"pr3d\")\n  |> common()\n  |> group()\n  |> filter(fn: (r) => r._time == latestTime._time)   // all rows from latest batch\n  |> filter(fn: (r) => r.y <= 119.0)\n  |> sort(columns: [\"y\"])                             // final sort by y (ascending)\n",
          "refId": "C"
        }
      ],
      "title": "Delay Probability Distribution",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^_value.*",
            "renamePattern": "Histogram [-18h]"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "^le.*",
            "renamePattern": "Delay"
          }
        },
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "greaterOrEqual",
                  "options": {
                    "value": "400"
                  }
                },
                "fieldName": "Delay"
              }
            ],
            "match": "any",
            "type": "exclude"
          }
        },
        {
          "id": "concatenate",
          "options": {
            "frameNameLabel": "frame",
            "frameNameMode": "field"
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "byVariable": false,
            "include": {
              "names": [
                "Delay",
                "prob",
                "Histogram [-18h]"
              ]
            }
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "prob",
            "renamePattern": "GMM Pred [-2h]"
          }
        }
      ],
      "type": "trend"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 4,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 16,
        "x": 8,
        "y": 11
      },
      "id": 13,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "query": "from(bucket: \"edaf_main\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"packet_decomposed\" and\r\n    r._field == \"app.e2e_delay\"\r\n  )",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: \"pr3d\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"predictions_gmm_2h_quants\")\n  |> filter(fn: (r) => r[\"_field\"] == \"y\")",
          "refId": "B"
        }
      ],
      "title": "End-to-end Delay [ms]",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {}
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "app.e2e_delay",
            "renamePattern": "Measured Delay"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "y 0",
            "renamePattern": "Predicted 0.9 quantile"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "y 1",
            "renamePattern": "Predicted 0.99 quantile"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "y 2",
            "renamePattern": "Predicted 0.999 quantile"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "y 3",
            "renamePattern": "Predicted 0.9999 quantile"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "y 4",
            "renamePattern": "Predicted 0.99999 quantile"
          }
        }
      ],
      "type": "timeseries"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "100ms",
      "500ms",
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Pr3d - Predictions",
  "uid": "dd6bdc69-5f33-4475-bdb6-419a7f783aceb",
  "version": 103,
  "weekStart": ""
}